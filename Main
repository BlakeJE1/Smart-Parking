import heapq

grid = [[["RL"], ["S"], ["W"], ["E"], ["W"], ["RU"], ["RR"], ["RR"]],
        [["RD"], ["W"], ["RL"], ["RU"], ["W"], ["RU"], ["W"], ["RD"]], 
        [["RD"], ["W"], ["W"], ["RU"], ["W"], ["RU"], ["W"], ["RD"]], 
        [["RD"], ["W"], ["P"], ["RL"], ["RU"], ["RR"], ["W"], ["RD"]], 
        [["RD"], ["RR"], ["W"], ["W"], ["RU"], ["W"], ["W"], ["RD"]], 
        [["W"], ["RD"], ["RR"], ["RR"], ["RR"], ["RR"], ["W"], ["P"]]]

j_max = len(grid[0])
i_max = len(grid)
cells = []

class cell():
    def __init__(self, i, j):
        self.i = i
        self.j = j
        self.parent = None
        self.g = 0
        self.h = 0
        self.f = 0
        self.up = False
        self.left = False
        self.right = False
        self.down = False

def classify_cells():
    parkingSpaces = []
    
    for j in range(j_max):
        for i in range(i_max):
            currentSquare = grid[i][j]
            currentCell = cell(i,j)
            if "E" in currentSquare:
                shopEntrance = [i,j]
            if "S" in currentSquare:
                startLocation = [i,j]
            if "RU" in currentSquare:
                currentCell.up = True
            if "RL" in currentSquare:
                currentCell.left = True
            if "RR" in currentSquare:
                currentCell.right = True
            if "RD" in currentSquare:
                currentCell.down = True
            if "P" in currentSquare:
                parkingSpaces.append([i,j])
            grid[i][j].append(currentCell)
    return  shopEntrance, parkingSpaces, startLocation
                
cellTypes = classify_cells()
shopEntrance = cellTypes[0]
parkingSpaces = cellTypes[1]
startLocation = cellTypes[2]

print("Shop entrance: " + str(shopEntrance) + "\nParking spaces: " + str(parkingSpaces))

def taxicabDistance(cell):
    dist = abs(cell[0] - shopEntrance[0]) + abs(cell[1] - shopEntrance[1])
    return dist

def compareTaxicabDistance(cell1, cell2):
    return taxicabDistance(cell1) - taxicabDistance(cell2)

for i in parkingSpaces:
    i.append(taxicabDistance(i))

parkingSpaces = sorted(parkingSpaces, key=lambda space: space[2])

for i in parkingSpaces:
    i.remove(i[-1])

end = parkingSpaces[0]

print("Ordered parking spaces: " + str(parkingSpaces))

def getCell(i, j):
    return grid[i][j][1]

start = getCell(startLocation[0], startLocation[1])

end = getCell(end[0], end[1])

def h(cell):
    return abs(cell.i - end.i) + abs(cell.j - end.j)

def getAdjacent(currentCell):
    adjCells = []
    if currentCell.i > 0:
        if getCell(currentCell.i-1, currentCell.j).up:
            adjCells.append(getCell(currentCell.i-1, currentCell.j))
            
    if currentCell.j > 0:
        if getCell(currentCell.i, currentCell.j-1).left:
            adjCells.append(getCell(currentCell.i, currentCell.j-1))
            
    if currentCell.i < i_max:
        if getCell(currentCell.i+1, currentCell.j).down:
            adjCells.append(getCell(currentCell.i+1, currentCell.j))

    if currentCell.j < j_max:
        if getCell(currentCell.i, currentCell.j+1).right:
            adjCells.append(getCell(currentCell.i, currentCell.j+1))
            
    return adjCells
    
def display_path():
    path = []
    currentCell = end
    print("Path:\n")
    while currentCell.parent is not start:
        currentCell = currentCell.parent
        print([currentCell.i, currentCell.j])

def updateCell(adj, cell):
    adj.g = cell.g + 1
    adj.h = h(adj)
    adj.parent = cell
    adj.f = adj.g + adj.h
    return

opened = []
heapq.heapify(opened)
closed = set()
cells = []

def process():
    heapq.heappush(opened, (start.f, start))
    while len(opened):
        f, cell = heapq.heappop(opened)
        closed.add(cell)
        if cell is end:
            display_path()
            break
        adj_cells = getAdjacent(cell)
        for adj_cell in adj_cells:
            if adj_cell not in closed:
                if (adj_cell.f, adj_cell) in opened:
                    if adj_cell.g > cell.g + 1:
                        updateCell(adj_cell, cell)
                else:
                    updateCell(adj_cell, cell)
                    heapq.heappush(opened, (adj_cell.f, adj_cell))

                    
process()
